#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

// parse CLI
def? $1 { @' $1 } { "0" } cond parse-workchain-id =: wc  // contract workchain
def? $2 { @' $2 } { "build/simple-wallet" } cond =: file-base  // file path prefix
def? $3 { @' $3 } { "../secrets/simple-wallet" } cond =: secret-base  // secret path prefix

// code
"build/simple-wallet.fif" include =: contract_code

// data
<b 0 32 u, // seqno
   secret-base +".pk" load-keypair =: wallet_pk B, // public key
b> =: contract_data

// create StateInit = (flags, code, data, libs)
<b 
   b{0011} s, 
   contract_code ref, 
   contract_data ref,
   null dict,
b> =: state_init
state_init ."StateInit: " <s csr. cr

// create smart contract address = hash(StateInit)
state_init hashu wc swap 2dup 2constant smc_addr
."Smart contract address: " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

// initial message + signing
<b 
   0 32 u, // first seqno = 0
b> =: init_message
init_message ."Initial message: " <s csr. cr
init_message hashu wallet_pk ed25519_sign_uint =: signature

// final external query to blockchain
<b 
   b{1000100} s, 
   smc_addr addr,      // { -rot 8 i, swap 256 u, } : addr  (see TonUtil.fif)
   b{000010} s, 
   state_init <s s, 
   b{0} s,
   signature B,
   init_message <s s,
b>
dup ."External message for initialization is " <s csr. cr

cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr

cr ."Address:" cr smc_addr 6 .Addr cr cr